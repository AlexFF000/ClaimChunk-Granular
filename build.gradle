import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id 'java'
}

// Plugin information
group 'com.cjburkey'
version '0.0.23-SNAPSHOT'
project.ext.liveVersion = '0.0.22'
project.ext.pluginName = 'ClaimChunk'
project.ext.mainClass = 'com.cjburkey.claimchunk.ClaimChunk'

// Dependency versions
project.ext.bukkitVersion = '1.16.3-R0.1-SNAPSHOT'
project.ext.spigotVersion = '1.16.3-R0.1-SNAPSHOT'
project.ext.vaultApiVersion = '1.7'
project.ext.worldEditCoreVersion = '7.1.0-SNAPSHOT'
project.ext.worldGuardVersion = '7.0.2-SNAPSHOT'
project.ext.worldGuardLegacyVersion = '7.0.0-SNAPSHOT'
project.ext.placeholderApiVersion = '2.10.6'
project.ext.jetbrainsAnnotationsVersion = '16.0.2'
project.ext.toml4jVersion = '0.7.2'

project.ext.juintVersion = '5.7.0'

// Use `gradlew build` just to build the jar file.
// To use these tasks effectively, download Spigot to this folder.
project.ext.testServerDir = new File('./run/')
project.ext.outputDir = new File('./OUT/')

// Java 8
sourceCompatibility = 1.8

project.ext.readmeIn = './unbuilt_readme.md'
project.ext.readmeOut = './README.md'

// Tokens to replace within files
project.ext.tokens = [
        "PLUGIN_VERSION": project.version,
        "MAIN_CLASS"    : project.ext.mainClass,
        "PLUGIN_NAME"   : project.ext.pluginName,
        "LIVE_VERSION"  : project.ext.liveVersion,
        "SPIGOT_VERSION": project.ext.spigotVersion.substring(0, project.ext.spigotVersion.indexOf('-')),
]


// -- DEPENDENCIES -- //


// Extra repos for Bukkit/Spigot stuff
repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'http://nexus.hc.to/content/repositories/pub_releases/' }
    maven { url 'https://maven.sk89q.com/repo/' }
    maven { url 'https://repo.mikeprimm.com' }
    maven { url 'https://papermc.io/repo/repository/maven-public/' }
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
}

dependencies {
    // Things needed to compile the plugin
    implementation "org.spigotmc:spigot-api:$spigotVersion"
    implementation "net.milkbowl.vault:VaultAPI:$vaultApiVersion"
    implementation "com.sk89q.worldedit:worldedit-core:$worldEditCoreVersion"
    implementation "com.sk89q.worldguard:worldguard-legacy:$worldGuardLegacyVersion"
    implementation "me.clip:placeholderapi:$placeholderApiVersion"
    implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
    
    testImplementation "org.junit.jupiter:junit-jupiter-api:$juintVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$juintVersion"
}

test {
    useJUnitPlatform()
    
    systemProperties = [
        'junit.jupiter.conditions.deactivate'           : '*',
        'junit.jupiter.extensions.autodetection.enabled': 'true',
        'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
    ]
}


// -- BUILDING README -- //


// Fill in readme placeholders
task updateReadme {
    // Set the inputs and outputs for the operation
    inputs.file project.ext.readmeIn
    outputs.file project.ext.readmeOut

    // Copy the new readme
    doLast {
        copy {
            from project.ext.readmeIn
            into file(project.ext.readmeOut).getParent()
            rename { n -> file(project.ext.readmeOut).getName() }
            filter ReplaceTokens, tokens: project.ext.tokens
        }
    }
}

clean {
    // Delete old build(s)
    project.delete(files(project.ext.outputDir))

    // Delete old build(s) from test server plugin dir
    delete fileTree(dir: new File(testServerDir, '/plugins/'), include: 'claimchunk**.jar')
}

// Replace placeholders with values in source and resource files
processResources {
    filter ReplaceTokens, tokens: project.ext.tokens
}


// -- BUILDING JARS -- //


// Enable all compiler warnings for cleaner (hopefully) code
compileJava {
    options.warnings = true
    options.deprecation = true
    options.compilerArgs += '-Xlint:all'
}

// Copy from the libs dir to the plugins directory in the testServerDir
task copyClaimChunkToPluginsDir(type: Copy) {
    dependsOn shadowJar
    from file(shadowJar.outputs.files.singleFile)
    into file(new File(testServerDir, '/plugins/'))
    rename 'claimchunk-(.*).jar', 'claimchunk-$1.jar'
}

// Copy from the libs dir to the plugins directory in the testServerDir
task copyClaimChunkToOutputDir(type: Copy) {
    dependsOn shadowJar
    from file(shadowJar.outputs.files.singleFile)
    into file(outputDir)
    rename 'claimchunk-(.*).jar', 'claimchunk-$1.jar'
}

// When the jar task is run, copy the version into the testServerDir and output
// (Also rebuild the README because Gradle and IDEA aren't getting along too well)
build.finalizedBy updateReadme
build.finalizedBy copyClaimChunkToPluginsDir
build.finalizedBy copyClaimChunkToOutputDir
